=begin
==========================
         Problem
--------------------------
create a 21 game by using OOP in ruby

I can create it how ever i want with whatever classes or modules that I think will fit
I would like to code a whole new game from scratch!!
This way I can compare what I used to be able to do to what I can do now!!!!
--------------------------
**Explicit Requirements**
--------------------------
- Rules: 
    -code a new game from scratch
    -only look at 21 code when you absolutly need to but you wont though so just use it as a reference check
-  Inputs: a deck of cards along with suits that make up 52 cards
-  Output: a winning statment that shows if someone won or not 
--------------------------
**Clarifying Questions:**
--------------------------
1.
2.
3.
--------------------------
**Implicit Requirements:**
--------------------------
make a whole game by yourself which you actually have already done about 200 hours ago lol 
--------------------------
Examples/Test Cases/Edge's
--------------------------
-  Visual Reference:

--------------------------
     Data Structure
--------------------------
an array of sub arrays that represent cards which turn into values 
--------------------------
       Algorithm
--------------------------
problem: create the deck
1. create constants that represent the suits and the cards
2. take the constants and pass both into each other as product and shuffle
3. store that in a deck variable

problem: show initial cards
1. take each hand 
2. iterate through the hand 
3. print the hand to the screen as a string
4. make sure the string includes the suite and the name 

problem: player turn
1. show card total 
    a. make a deal conversion  
2. ask if the player wants to hit or stay?
3. keep hitting until stay is selected 

problem: deal conversion
1. create a sum instance variable 
2. in hit run through the card that is given and add to sum 
--------------------------
          Notes
--------------------------

on the player turn problem; a loop would probably be appropriate to keep hitting and break if stay
stay needs to be a boolean